buildscript {
    ext.kotlin_version = "2.2.20"
    ext.spring_boot_version = "3.5.5"
    ext.jackson_version = "2.20.0"
    ext.lombok_version = "1.18.40"
    ext.mockito_version = "3.10.0"
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version")
        classpath("gradle.plugin.org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.12.2")
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "com.palantir.git-version:com.palantir.git-version.gradle.plugin:4.0.0"
    }
}

apply plugin: "java"
apply plugin: "kotlin"
apply plugin: "kotlin-spring"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "com.github.kt3k.coveralls"
apply plugin: "com.palantir.git-version"



//runtime("org.springframework.boot:spring-boot-properties-migrator")
jar {
    archivesBaseName = "boat"
    archiveVersion = getTagVersion()
}

repositories {
    mavenCentral()
}

sourceCompatibility = 21
targetCompatibility = 21

dependencies {
    // tag::jetty[]
    implementation("org.springframework.boot:spring-boot-starter-web:$spring_boot_version") {
        //exclude module: "spring-boot-starter-tomcat"
    }
    //implementation group: "org.springframework.boot", name: "spring-boot-starter-jetty", version: "$spring_boot_version"
    // end::jetty[]
    // tag::actuator[]
    implementation("org.springframework.boot:spring-boot-starter-actuator:$spring_boot_version")
    // end::actuator[]
    implementation("org.jsoup:jsoup:1.21.2")
    //implementation "org.springframework.experimental.aot:org.springframework.experimental.aot.gradle.plugin:0.10.6"

    implementation group: "com.google.code.gson", name: "gson", version: "2.13.1"

    implementation group: "com.fasterxml.jackson.core", name: "jackson-core", version: "$jackson_version"
    implementation group: "com.fasterxml.jackson.core", name: "jackson-databind", version: "$jackson_version"
    implementation group: "org.springframework.boot", name: "spring-boot-properties-migrator", version: "$spring_boot_version"
    implementation group: "org.springframework.boot", name: "spring-boot-starter-cache", version: "$spring_boot_version"
    implementation group: "org.springframework.boot", name: "spring-boot-starter-data-mongodb", version: "$spring_boot_version"
    implementation group: "com.github.ben-manes.caffeine", name: "caffeine", version: "3.2.2"
    implementation group: "commons-io", name: "commons-io", version: "2.20.0"
    implementation group: "commons-codec", name: "commons-codec", version: "1.19.0"
    implementation group: "commons-validator", name: "commons-validator", version: "1.10.0"

    implementation "org.projectlombok:lombok:$lombok_version"
    annotationProcessor "org.projectlombok:lombok:$lombok_version"

    testImplementation "org.projectlombok:lombok:$lombok_version"
    testAnnotationProcessor "org.projectlombok:lombok:$lombok_version"

    runtimeOnly("org.springframework.boot:spring-boot-properties-migrator")

    testImplementation group: "org.mockito", name: "mockito-core", version: mockito_version
    testImplementation group: "org.mockito", name: "mockito-junit-jupiter", version: mockito_version
    testImplementation "io.mockk:mockk:1.14.5"
    testImplementation("org.junit.jupiter:junit-jupiter:5.13.4")
    testImplementation("org.springframework.boot:spring-boot-starter-test:$spring_boot_version")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

}

static def getCheckedOutGitCommitHash() {
    def takeFromHash = 12
    return 'git rev-parse --verify --short HEAD'.execute().text.trim().take(takeFromHash)
}

static def getTagVersion() {
    ["sh", "-c", "git fetch --all --tags>/dev/null&& git describe --tags --always --first-parent|tail -1"].execute().text.trim()
}

tasks.register('createProperties') {
    dependsOn processResources
    doLast {
        new File("$buildDir/resources/main/version.properties").withWriter { w ->
            Properties p = new Properties()
            p["version"] = jar.archiveVersion.get() + "-" + getCheckedOutGitCommitHash() + "-" + new Date().format("yyyy-MM-dd HH:mm:ss Z")
            println("Version:" + p["version"])
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}

test {
    useJUnitPlatform()
    testLogging {
        events "standardOut", "started", "passed", "skipped", "failed"
        showStandardStreams = true
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "21"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "21"
    }
}

subprojects {
    tasks.withType(Test).tap {
        configureEach {
            maxParallelForks = Runtime.runtime.availableProcessors()
        }
    }
}
